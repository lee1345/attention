<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fs.four.human.address.dao.AddressDAO">

    <!-- 로그인 직원의 주소록 데이터 조회 -->
    <select id="getAddressByEmployeeId" resultType="AddressVO">
        SELECT
            AD_ID AS adId,
            AD_NAME AS adName,
            AD_PHONE AS adPhone,
            AD_EMAIL AS adEmail,
            AD_DEPT_NAME AS adDeptName,
            AD_GROUP AS adGroup
        FROM ADDRESS
        WHERE AD_EMPL_ID = #{employeeId}
        ORDER BY adId DESC
    </select>

    <!-- 로그인 직원의 주소록 검색 -->
    <select id="searchAddressByEmployeeId" resultType="AddressVO">
        SELECT
            AD_ID AS adId,
            AD_NAME AS adName,
            AD_PHONE AS adPhone,
            AD_EMAIL AS adEmail,
            AD_DEPT_NAME AS adDeptName,
            AD_GROUP AS adGroup
        FROM ADDRESS
        WHERE LOWER(${category}) LIKE '%' || LOWER(#{query}) || '%'
        AND AD_EMPL_ID = #{employeeId}
        ORDER BY adId DESC
    </select>

    <!-- 특정 주소록 조회 -->
    <select id="getAddressById" resultType="AddressVO">
        SELECT
        AD_ID AS adId,
        AD_NAME AS adName,
        AD_PHONE AS adPhone,
        AD_EMAIL AS adEmail,
        AD_DEPT_NAME AS adDeptName,
        AD_GROUP AS adGroup
        FROM ADDRESS
        WHERE AD_ID = #{id}
    </select>

    <!-- 새로운 주소 데이터 등록 -->
    <insert id="createAddress">
        INSERT INTO ADDRESS (AD_ID, AD_EMPL_ID, AD_NAME, AD_PHONE, AD_EMAIL, AD_DEPT_NAME, AD_GROUP,  AD_CREATED_DATE, AD_UPDATED_DATE )
        VALUES (
            address_seq.NEXTVAL,
            #{adEmplId},
            #{adName},
            #{adPhone},
            #{adEmail},
            #{adDeptName},
            #{adGroup},

            SYSDATE,
            SYSDATE
        )
    </insert>

    <!-- 주소록 수정 -->
    <update id="updateAddress">
        UPDATE ADDRESS
        SET AD_NAME = #{adName},
            AD_PHONE = #{adPhone},
            AD_EMAIL = #{adEmail},
            AD_DEPT_NAME = #{adDeptName},
            AD_GROUP = #{adGroup}
        WHERE AD_ID = #{adId}
    </update>

    <!-- 주소록 삭제 -->
    <delete id="deleteAddress">
        DELETE FROM ADDRESS
        WHERE AD_ID = #{id}
    </delete>

    <!-- 정렬 -->
    <select id="sortAddress" parameterType="map" resultType="fs.four.human.address.vo.AddressVO">
        SELECT
        AD_ID AS adId,
        AD_NAME AS adName,
        AD_PHONE AS adPhone,
        AD_EMAIL AS adEmail,
        AD_DEPT_NAME AS adDeptName,
        AD_GROUP AS adGroup
        FROM ADDRESS
        WHERE AD_EMPL_ID = #{params.employeeId} <!-- employeeId 조건 추가 -->
        ORDER BY
        <choose>
            <when test="params.column == 'AD_NAME'">AD_NAME</when>
            <when test="params.column == 'AD_PHONE'">AD_PHONE</when>
            <when test="params.column == 'AD_EMAIL'">AD_EMAIL</when>
            <when test="params.column == 'AD_DEPT_NAME'">AD_DEPT_NAME</when>
            <when test="params.column == 'AD_GROUP'">AD_GROUP</when>
            <otherwise>AD_ID</otherwise>
        </choose>
        ${params.order} <!-- ASC 또는 DESC -->
    </select>





</mapper>
