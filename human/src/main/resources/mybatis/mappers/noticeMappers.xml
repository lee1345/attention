<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="fs.four.human.notice.dao.NoticeDAO">

    <!-- 전체 공지사항 조회 -->
    <select id="getAllNotice" resultType="NoticeVO">
        SELECT
        B_ID as b_Id,
        B_TITLE as b_Title,
        B_CONTENT as b_Content,
        B_WRITER as b_Writer,
        B_GROUP as b_Group,
        B_CATEGORY as b_Category,
        B_CREATED_DATE as b_CreatedDate,
        B_UPDATED_DATE as b_UpdatedDate,
        VIEW_COUNT as b_ViewCount <!-- 조회수 컬럼 추가 -->
        FROM BOARD
        WHERE b_group = 'N' -- 공지사항만 조회
        ORDER BY b_id DESC -- 번호를 기준으로 내림차순 정렬
    </select>

    <!-- 검색 기능 -->
    <select id="searchNotice" resultType="NoticeVO">
        SELECT
        B_ID as b_Id,
        B_TITLE as b_Title,
        B_CONTENT as b_Content,
        B_WRITER as b_Writer,
        B_GROUP as b_Group,
        B_CATEGORY as b_Category,
        B_CREATED_DATE as b_CreatedDate,
        B_UPDATED_DATE as b_UpdatedDate,
        VIEW_COUNT as b_ViewCount <!-- 조회수 컬럼 추가 -->
        FROM BOARD
        WHERE b_group = 'N' -- 공지사항만 검색
        AND LOWER(${category}) LIKE '%' || LOWER(#{query}) || '%' -- 대소문자 구분 없이 검색
        ORDER BY b_id DESC -- 번호를 기준으로 내림차순 정렬
    </select>

    <!-- 특정 공지사항 조회 -->
    <select id="getNoticeById" resultType="NoticeVO">
        SELECT
        B_ID as b_Id,
        B_TITLE as b_Title,
        B_CONTENT as b_Content,
        B_WRITER as b_Writer,
        B_GROUP as b_Group,
        B_CATEGORY as b_Category,
        B_CREATED_DATE as b_CreatedDate,
        B_UPDATED_DATE as b_UpdatedDate,
        VIEW_COUNT as b_ViewCount <!-- 조회수 컬럼 추가 -->
        FROM BOARD
        WHERE B_ID = #{id}
    </select>

    <!-- 새로운 공지사항 데이터 등록 -->
    <insert id="createNotice">
        INSERT INTO BOARD (
        b_id, b_title, b_content, b_writer, b_group, b_category, b_created_date, b_updated_date, view_count
        ) VALUES (
        notice_seq.NEXTVAL,
        #{b_Title},
        #{b_Content},
        #{b_Writer},
        'N',
        NULL, -- 카테고리는 공지사항에서는 사용하지 않음
        SYSDATE,
        SYSDATE,
        0 -- 조회수 기본값 0으로 설정
        )
    </insert>

    <!-- 게시글 수정 -->
    <update id="updateNotice">
        UPDATE BOARD
        SET
        B_TITLE = #{b_Title},
        B_CONTENT = #{b_Content},
        B_UPDATED_DATE = SYSDATE
        WHERE B_ID = #{b_Id}
    </update>

    <!-- 게시글 삭제 -->
    <delete id="deleteNotice">
        DELETE FROM BOARD
        WHERE B_ID = #{id}
    </delete>

    <!-- 조회수 증가 -->
    <update id="incrementViewCount" parameterType="int">
        UPDATE BOARD
        SET VIEW_COUNT = NVL(VIEW_COUNT, 0) + 1
        WHERE B_ID = #{id}
    </update>

       <!-- 정렬 -->
    <select id="sortNotices" parameterType="map" resultType="fs.four.human.notice.vo.NoticeVO">
        SELECT
        B_ID as b_Id,
        B_TITLE as b_Title,
        B_CONTENT as b_Content,
        B_WRITER as b_Writer,
        B_GROUP as b_Group,
        B_CATEGORY as b_Category,
        B_CREATED_DATE as b_CreatedDate,
        B_UPDATED_DATE as b_UpdatedDate,
        VIEW_COUNT as b_ViewCount
        FROM BOARD
        WHERE B_GROUP = 'N' <!-- 공지사항 그룹만 가져오기 -->
        ORDER BY
        <choose>
            <when test="column == 'B_ID'">B_ID</when>
            <when test="column == 'B_TITLE'">B_TITLE</when>
            <when test="column == 'B_CONTENT'">B_CONTENT</when>
            <when test="column == 'B_WRITER'">B_WRITER</when>
            <when test="column == 'B_CREATEDDATE'">B_CREATED_DATE</when>
            <when test="column == 'B_VIEWCOUNT'">VIEW_COUNT</when>
            <otherwise>B_ID</otherwise>
        </choose>
        ${order}
    </select>

</mapper>
